
// <editor-fold defaultstate="collapsed" desc="import">
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
//</editor-fold>


/**
 *
 * @author phamb
 */
public final class TodoList extends javax.swing.JFrame {
    
    // <editor-fold defaultstate="collapsed" desc="Declare viriables">
    DefaultComboBoxModel  model1 = new DefaultComboBoxModel();
    int row_selected;
    boolean isselect = false;
    Color ivory = new Color(51, 51, 51);
    eventmanager list = new eventmanager();
    File f= new File("MemoData/TodoList.txt");
    File f3= new File("MemoData/a.txt");
    FileOutputStream out1;
    FileInputStream f2 ;
    int dem=0;
    javax.swing.ImageIcon icon = new javax.swing.ImageIcon ( java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/To-Do-List.png")));    private static DefaultTableModel model;
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Constructor">
    public TodoList() {
        initComponents();
        set_components();
        table.getTableHeader().setDefaultRenderer(new HeaderColor());
        setIconImage(icon.getImage());
        set();
        show_todolist();   
    }
    // </editor-fold>

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        TodoPanel = new javax.swing.JPanel();
        edit = new javax.swing.JButton();
        del = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        EditPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        box_type = new javax.swing.JComboBox();
        box_location = new javax.swing.JTextField();
        box_time = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        OK = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        box_event = new javax.swing.JTextArea();
        Cancel = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Todo List");
        setBackground(new java.awt.Color(51, 51, 47));

        TodoPanel.setBackground(new java.awt.Color(52, 55, 51));
        TodoPanel.setForeground(new java.awt.Color(255, 255, 255));

        edit.setForeground(new java.awt.Color(102, 102, 102));
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        del.setForeground(new java.awt.Color(102, 102, 102));
        del.setText("Delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));

        table.setBackground(new java.awt.Color(51, 51, 51));
        table.setForeground(new java.awt.Color(255, 255, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Time", "Location", "Type", "Event"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setMinimumSize(new java.awt.Dimension(370, 180));
        table.setOpaque(false);
        table.setPreferredSize(new java.awt.Dimension(370, 180));
        table.getTableHeader().setResizingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(90);
            table.getColumnModel().getColumn(0).setPreferredWidth(90);
            table.getColumnModel().getColumn(0).setMaxWidth(90);
            table.getColumnModel().getColumn(1).setMinWidth(90);
            table.getColumnModel().getColumn(1).setPreferredWidth(90);
            table.getColumnModel().getColumn(1).setMaxWidth(90);
            table.getColumnModel().getColumn(2).setPreferredWidth(2);
            table.getColumnModel().getColumn(3).setMinWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        EditPanel.setVerifyInputWhenFocusTarget(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Type");

        box_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Event", "Birthday", "Meeting", "Anniversary" }));
        box_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_typeActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Time");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Location");

        OK.setForeground(new java.awt.Color(255, 255, 255));
        OK.setText("OK");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Event");

        box_event.setColumns(20);
        box_event.setRows(5);
        jScrollPane2.setViewportView(box_event);

        Cancel.setForeground(new java.awt.Color(255, 255, 255));
        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditPanelLayout = new javax.swing.GroupLayout(EditPanel);
        EditPanel.setLayout(EditPanelLayout);
        EditPanelLayout.setHorizontalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPanelLayout.createSequentialGroup()
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, EditPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditPanelLayout.createSequentialGroup()
                                .addComponent(box_type, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(box_time, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(box_location, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2)))
                    .addGroup(EditPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(Cancel)))
                .addContainerGap())
        );
        EditPanelLayout.setVerticalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(box_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box_location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Cancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout TodoPanelLayout = new javax.swing.GroupLayout(TodoPanel);
        TodoPanel.setLayout(TodoPanelLayout);
        TodoPanelLayout.setHorizontalGroup(
            TodoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TodoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(del)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addComponent(jScrollPane1)
            .addComponent(EditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TodoPanelLayout.setVerticalGroup(
            TodoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TodoPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(TodoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(del)
                    .addComponent(edit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TodoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TodoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // <editor-fold defaultstate="collapsed" desc="ActionPerformed">
    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        edit.setEnabled(false);
        edit.setForeground(new Color(102,102,102));
        del.setEnabled(false);
        del.setForeground(new Color(102,102,102));
        setSize(796,500);
        EditPanel.setSize(785,190);
        EditPanel.setVisible(true);
        events eve = get_eve_row();
        box_location.setText(eve.get_diadiem());
        box_time.setText(""+eve.get_thoigian());
        box_event.setText(eve.get_noidung());
        box_type.setSelectedItem(eve.get_loai());
    }//GEN-LAST:event_editActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        if(isselect){
            events eve = get_eve_row();
            int click = JOptionPane.showConfirmDialog(rootPane, "This event will be deleted! Continue ?", "Message", 0);
            if(click == JOptionPane.OK_OPTION)
            {
                
                String[] data = eve.get_ngay().split("/");
                File f = new File("MemoData/"+data[0]+data[1]+data[2]+".txt");
                if(f.exists())
                {
                    f.delete();
                    list.Xoa_index(row_selected);
                    writeTodolist();
                    show_todolist();
                    edit.setForeground(new Color(102,102,102));
                    del.setForeground(new Color(102,102,102));
                }
            }
            else
            {
                edit.setForeground(new Color(102,102,102));
                del.setForeground(new Color(102,102,102));
                del.setEnabled(false);
                edit.setEnabled(false);
            }
            set();
        }
    }//GEN-LAST:event_delActionPerformed

    private void box_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_box_typeActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        int click = JOptionPane.showConfirmDialog(rootPane, "This event will be changed! Continue?", "Message", 0);
        if(click == JOptionPane.OK_OPTION)
        {
            events eve = get_eve_edit();
            list.Xoa(list.getEvent_existdate(eve.get_ngay()));
            list.themevt(eve);
            writeTodolist();
        }
        show_todolist();
        reset_edit();
        set();
       
    }//GEN-LAST:event_OKActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
        row_selected = table.getSelectedRow();
        System.out.println(row_selected);
        if(row_selected >= dem)
        {
            isselect = false;
            del.setEnabled(false);
            edit.setEnabled(false);
            del.setForeground(new Color(102,102,102));
            edit.setForeground(new Color(102,102,102));
        }
        else
        {
            isselect = true;
            del.setEnabled(true);
            edit.setEnabled(true);
            del.setForeground(Color.WHITE);
            edit.setForeground(Color.WHITE);
        }
        
        
    }//GEN-LAST:event_tableMouseClicked

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        
        reset_edit();
        set();        
    }//GEN-LAST:event_CancelActionPerformed
// </editor-fold>
  
    // <editor-fold defaultstate="collapsed" desc="Main()">
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TodoList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TodoList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TodoList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TodoList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TodoList().setVisible(true);
            } 
       });
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="declare variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JPanel EditPanel;
    private javax.swing.JButton OK;
    private javax.swing.JPanel TodoPanel;
    private javax.swing.JTextArea box_event;
    private javax.swing.JTextField box_location;
    private javax.swing.JTextField box_time;
    private javax.swing.JComboBox box_type;
    private javax.swing.JButton del;
    private javax.swing.JButton edit;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
//</editor-fold>
 
    // <editor-fold defaultstate="collapsed" desc="Xu ly">
    private void show_todolist(){
        readtodoList();
        model = (DefaultTableModel )table.getModel();
        model.setRowCount(0);
        list.getList().stream().forEach((events eve) -> {
            model.addRow(new Object[]{
                swap(eve.get_ngay()),eve.get_thoigian(),eve.get_diadiem(),eve.get_loai(),eve.get_noidung()
            });
        });
        
            int temp = model.getRowCount();
            //System.out.println(temp);
            if(temp<=12)
                model.setRowCount(12);
    }
    
    private events get_eve_row(){
        if(row_selected >= 0)
        {
            String date = swap(model.getValueAt(row_selected, 0).toString());
            String time = model.getValueAt(row_selected, 1).toString();
            String location = model.getValueAt(row_selected, 2).toString();
            String type = model.getValueAt(row_selected, 3).toString();
            String event = model.getValueAt(row_selected, 4).toString();
            return (new events(date,type,event,location,time));
        }
        else
        { 
            return new events();
        }
    }
    
    private events get_eve_edit(){
        String date = swap(model.getValueAt(row_selected, 0).toString());
        String time = box_time.getText();
        String location = box_location.getText();
        String type = box_type.getSelectedItem().toString();
        String event = box_event.getText();
        return new events(date,type,event,location,time);
    }
    
    private void set(){
        del.setEnabled(false);
        edit.setEnabled(false);
        EditPanel.setVisible(false);
        TodoPanel.setSize(780,292);
        setSize(796, 300);
    }
    
    private void set_components(){
        del.setContentAreaFilled(false);
        del.setBorderPainted(false);
        del.setBackground(new Color(51, 133, 255));
        del.setFocusPainted(false);
        del.setOpaque(true);
        
        edit.setContentAreaFilled(false);
        edit.setBorderPainted(false);
        edit.setBackground(new Color(51, 133, 255));
        edit.setFocusPainted(false);
        edit.setOpaque(true);
        
        OK.setContentAreaFilled(false);
        OK.setBorderPainted(false);
        OK.setBackground(new Color(51, 133, 255));
        OK.setFocusPainted(false);
        OK.setOpaque(true);
        
        Cancel.setContentAreaFilled(false);
        Cancel.setBorderPainted(false);
        Cancel.setBackground(new Color(51, 133, 255));
        Cancel.setFocusPainted(false);
        Cancel.setOpaque(true);
        
        EditPanel.setBackground(ivory);
        TodoPanel.setBackground(ivory);
        
    }
    
    private void reset_edit(){
        box_location.setText(null);
        box_time.setText(null);
        box_event.setText(null);
    }
    
    // <editor-fold defaultstate="collapsed" desc="Read - Write Todo List">
    private void readtodoList(){
        //events e ;
        list.clear();
        dem = getsize();
        //System.out.print(dem);
        if(f.exists())
        {
            try {
                f2 = new FileInputStream(f);
                try {
                    ObjectInputStream inStream = new ObjectInputStream(f2);
                    for(int i=0;i<dem;i++)
                    {
                        try {
                            list.themevt((events) inStream.readObject());
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    //dem = (list.getList()).size();
                    inStream.close();
                    
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private int getsize(){
        int count = 0;
        File dir = new File("MemoData");
 
        File[] children = dir.listFiles();
 
        for (File file : children) {
            count++;
        }
        return count-1;
    }
    
    private void writeTodolist(){
        this.list = this.list.sort();
        f.delete();
        ObjectOutputStream oStream;
        try {
            out1 = new FileOutputStream(f);
            try {
                oStream = new ObjectOutputStream(out1);
                for(events evt : this.list.getList())
            {
                try {
                    oStream.writeObject(evt);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
               oStream.close(); 
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }
    
    public void out(){
       // todolist.clear();
        events e ;
        dem = getsize();
        if(f.exists())
        {
            try {
                f2 = new FileInputStream(f);
                    ObjectInputStream inStream = new ObjectInputStream(f2);
                    for(int i=0;i<dem;i++)
                    {
                        
                            e=(events) inStream.readObject();
                            System.out.println(e.get_ngay());
                            System.out.println(e.get_loai());
                            System.out.println(e.get_noidung());
                            System.out.println("");
                    }
                    inStream.close();
                }
            catch (FileNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            catch (ClassNotFoundException ex) {
                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
        }
    }
    
    static private String swap(String s){
        String [] data = s.split("/");
        s = data[2]+"/"+data[1]+"/"+data[0];
        return s;
    }
    
    public class HeaderColor extends DefaultTableCellRenderer{
        public HeaderColor()
        {
            setOpaque(true);
        }
        public Component getTableCellRendererComponent(JTable mytable, Object value, boolean selected, boolean focused, int row, int column)
        {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            setBackground(ivory);
            setFont(new Font("Dialog", Font.BOLD, 20));
            return this; 
        }
    }
    
    
    
    
    // </editor-fold>
    
    // </editor-fold>
}
